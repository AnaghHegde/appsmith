package com.appsmith.server.repositories;

import com.appsmith.server.constants.FieldName;
import com.appsmith.server.domains.Application;
import com.appsmith.server.domains.QApplication;
import com.appsmith.server.domains.QGitApplicationMetadata;
import com.appsmith.server.repositories.ce.CustomApplicationRepositoryCEImpl;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.ReactiveMongoOperations;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Flux;

import java.util.List;
import java.util.Set;

import static com.appsmith.server.constants.Constraint.NO_RECORD_LIMIT;

@Component
@Slf4j
public class CustomApplicationRepositoryImpl extends CustomApplicationRepositoryCEImpl
        implements CustomApplicationRepository {

    @Autowired
    public CustomApplicationRepositoryImpl(@NonNull ReactiveMongoOperations mongoOperations,
                                           @NonNull MongoConverter mongoConverter, CacheableRepositoryHelper cacheableRepositoryHelper) {
        super(mongoOperations, mongoConverter, cacheableRepositoryHelper);
    }

    @Override
    public Flux<Application> findDefaultApplicationsByWorkspaceIds(Set<String> workspaceIds) {
        Criteria workspaceCriteria = Criteria.where(FieldName.WORKSPACE_ID).in(workspaceIds);
        // Filter out the applications which are not connected to git
        QGitApplicationMetadata gitApplicationMetadata = QApplication.application.gitApplicationMetadata;
        String gitApplicationMetadataPath = fieldName(gitApplicationMetadata);
        String defaultBranchName = gitApplicationMetadataPath + "." + fieldName(gitApplicationMetadata.defaultBranchName);
        String branchName = gitApplicationMetadataPath + "." + fieldName(gitApplicationMetadata.branchName);

        Criteria gitApplicationMetadataCriteria = Criteria.where(fieldName(gitApplicationMetadata)).exists(false);
        // Filter out applications where the ssh key is generated by user and the connect app has failed
        Criteria notGitApplicationMetadataCriteria = new Criteria()
                .andOperator(
                        Criteria.where(fieldName(gitApplicationMetadata)).exists(true),
                        Criteria.where(defaultBranchName).exists(false),
                        Criteria.where(branchName).exists(false)
                );

        // Filter out applications where the DefaultBranchName is missing due to branch creation flow failures or corrupted scenarios
        Criteria gitApplicationMetadataDefaultBranchNameCriteria = new Criteria()
                .andOperator(
                        Criteria.where(fieldName(gitApplicationMetadata)).exists(true),
                        Criteria.where(defaultBranchName).exists(true),
                        Criteria.where(branchName).exists(true),
                        // This criteria is the only way I could figure out to compare 2 fields in the same document
                        Criteria.where("$where").is("this." + defaultBranchName + " == this." + branchName)
                );

        Criteria gitCriteria = new Criteria()
                .orOperator(gitApplicationMetadataCriteria,
                        notGitApplicationMetadataCriteria,
                        gitApplicationMetadataDefaultBranchNameCriteria);

        return queryAllWithoutPermissions(
                List.of(workspaceCriteria, gitCriteria),
                null,
                null,
                NO_RECORD_LIMIT
        );
    }

}
