// Generated by CodiumAI
import { LabelPosition } from "components/constants";
import { Alignment } from "@blueprintjs/core";
import { ResponsiveBehavior } from "layoutSystems/common/utils/constants";
import RangeSliderWidget from ".";

describe("RangeSliderWidget", () => {
  // The widget initializes with default properties correctly
  it("should initialize with default properties", () => {
    const props = {
      accentColor: "#FF5733",
      defaultStartValue: 10,
      defaultEndValue: 100,
      start: 0,
      end: 20,
      isDirty: false,
      onStartChange: "handleStartChange",
      onEndChange: "handleEndChange",
      isVisible: true,
      isDisabled: false,
      tooltipAlwaysOn: false,
      labelText: "Percentage",
      labelPosition: LabelPosition.Top,
      labelAlignment: Alignment.LEFT,
      labelWidth: 8,
      labelTextSize: "0.875rem",
      rows: 8,
      columns: 40,
      widgetName: "RangeSlider",
      shouldScroll: false,
      shouldTruncate: false,
      version: 1,
      animateLoading: true,
      sliderSize: "m",
      responsiveBehavior: ResponsiveBehavior.Fill,
      marks: [
        { value: 25, label: "25%" },
        { value: 50, label: "50%" },
        { value: 75, label: "75%" },
      ],
    };

    const rangeSliderWidget = new RangeSliderWidget(props);
    expect(rangeSliderWidget.props.defaultStartValue).toBe(10);
    expect(rangeSliderWidget.props.defaultEndValue).toBe(100);
    expect(rangeSliderWidget.props.min).toBe(0);
    expect(rangeSliderWidget.props.max).toBe(100);
    expect(rangeSliderWidget.props.step).toBe(1);
  });

  // The widget handles min and max values correctly when they are set to the same value
  it("should handle min and max values correctly when they are the same", () => {
    const props = {
      accentColor: "#FF5733",
      defaultStartValue: 10,
      defaultEndValue: 10,
      start: 0,
      end: 20,
      isDirty: false,
      onStartChange: "handleStartChange",
      onEndChange: "handleEndChange",
      isVisible: true,
      isDisabled: false,
      tooltipAlwaysOn: false,
      labelText: "Percentage",
      labelPosition: LabelPosition.Top,
      labelAlignment: Alignment.LEFT,
      labelWidth: 8,
      labelTextSize: "0.875rem",
      rows: 8,
      columns: 40,
      widgetName: "RangeSlider",
      shouldScroll: false,
      shouldTruncate: false,
      version: 1,
      animateLoading: true,
      sliderSize: "m",
      responsiveBehavior: ResponsiveBehavior.Fill,
      marks: [
        { value: 25, label: "25%" },
        { value: 50, label: "50%" },
        { value: 75, label: "75%" },
      ],
    };

    const rangeSliderWidget = new RangeSliderWidget(props);
    expect(rangeSliderWidget.props.defaultStartValue).toBe(10);
    expect(rangeSliderWidget.props.defaultEndValue).toBe(10);
    expect(rangeSliderWidget.props.min).toBe(0);
    expect(rangeSliderWidget.props.max).toBe(100);
    expect(rangeSliderWidget.props.step).toBe(1);
  });
});
