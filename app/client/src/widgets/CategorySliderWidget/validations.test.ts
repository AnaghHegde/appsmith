// Generated by CodiumAI
import {
  defaultOptionValidation,
  optionsCustomValidation,
} from "./validations";
import _ from "lodash";
describe("defaultOptionValidation", () => {
  // Valid string value in options returns isValid true
  it("should return isValid true when value is a valid string in options", () => {
    const props = {
      options: [
        { label: "Option 1", value: "option1" },
        { label: "Option 2", value: "option2" },
      ],
    };
    const value = "option1";
    const result = defaultOptionValidation(value, props, _);
    expect(result.isValid).toBe(true);
    expect(result.parsed).toBe(value);
  });

  // Null value returns isValid false with TypeError
  it("should return isValid false with TypeError when value is null", () => {
    const props = {
      options: [
        { label: "Option 1", value: "option1" },
        { label: "Option 2", value: "option2" },
      ],
    };
    const value = null;
    const result = defaultOptionValidation(value, props, _);
    expect(result.isValid).toBe(false);
    expect(result.messages[0].name).toBe("ValidationError");
    expect(result.messages[0].message).toBe(
      "Default value is missing in options. Please update the value.",
    );
  });
});

// Generated by CodiumAI

describe("optionsCustomValidation", () => {
  // Validates options with at least two entries
  it("should return valid response when options have at least two entries", () => {
    const options = [
      { label: "Option 1", value: "1" },
      { label: "Option 2", value: "2" },
    ];
    const props = {
      accentColor: "#000",
      options: options,
      defaultOptionValue: "1",
      isDirty: false,
      value: "1",
      onChange: "onChange",
    };
    const result = optionsCustomValidation(options, props, _);
    expect(result.isValid).toBe(true);
    expect(result.parsed).toEqual(options);
    expect(result.messages).toEqual([{ name: "", message: "" }]);
  });

  // Handles options with less than two entries
  it("should return invalid response when options have less than two entries", () => {
    const options = [{ label: "Option 1", value: "1" }];
    const props = {
      accentColor: "#000",
      options: options,
      defaultOptionValue: "1",
      isDirty: false,
      value: "1",
      onChange: "onChange",
    };
    const result = optionsCustomValidation(options, props, _);
    expect(result.isValid).toBe(false);
    expect(result.parsed).toEqual([]);
    expect(result.messages).toEqual([
      { name: "ValidationError", message: "Please have at-least 2 options" },
    ]);
  });
});
