// Generated by CodiumAI
import { optionsCustomValidation } from "./optionsCustomValidation";
describe("code snippet", () => {
  // Validates an array of objects with unique values and correct types
  it("should return valid response when array has unique values and correct types", () => {
    const options = [
      { label: "Option 1", value: "value1" },
      { label: "Option 2", value: "value2" },
    ];
    const props = {};
    const _ = {
      isNil: jest.fn().mockReturnValue(false),
      isString: jest.fn().mockReturnValue(false),
    };

    const result = optionsCustomValidation(options, props, _);

    expect(result.isValid).toBe(true);
    expect(result.parsed).toEqual(options);
    expect(result.messages[0].name).toBe("");
  });

  // Handles duplicate values in the array
  it("should return invalid response when array has duplicate values", () => {
    const options = [
      { label: "Option 1", value: "value1" },
      { label: "Option 2", value: "value1" },
    ];
    const props = {};
    const _ = {
      isNil: jest.fn().mockReturnValue(false),
      isString: jest.fn().mockReturnValue(false),
    };

    const result = optionsCustomValidation(options, props, _);

    expect(result.isValid).toBe(false);
    expect(result.parsed).toEqual([]);
    expect(result.messages[0].name).toBe("ValidationError");
    expect(result.messages[0].message).toBe(
      "path:value must be unique. Duplicate values found",
    );
  });
});
