import type { EvaluationSubstitutionType } from "@appsmith/entities/DataTree/types";
import type { CodeEditorExpected } from "components/editorComponents/CodeEditor";
import type { Stylesheet } from "entities/AppTheming";
import type { ReduxActionType } from "@appsmith/constants/ReduxActionConstants";
import type { PropertyUpdates } from "WidgetProvider/types";
import type { WidgetProps } from "widgets/types";
import type { ValidationConfig } from "./types";
import type { ControlType } from "constants/types";
import type { TruthyPrimitiveTypes } from "utils/TypeHelpers";

export type AdditionalDynamicDataTree = Record<
  string,
  Record<string, unknown> | TruthyPrimitiveTypes
>;

export interface PropertyPaneSectionConfig {
  sectionName: string;
  id?: string;
  children: PropertyPaneConfig[];
  collapsible?: boolean; // Indicates whether the section could be collapsed or not
  childrenId?: string; // A unique id generated by combining the ids of all the children
  hidden?: (props: any, propertyPath: string) => boolean;
  isDefaultOpen?: boolean;
  propertySectionPath?: string;
  tag?: string; // Used to show a tag right after the section name (only in the search results)

  hasDynamicProperties?: boolean;
  generateDynamicProperties?: (
    widget: WidgetProps,
  ) => PropertyPaneControlConfig[];
}

export interface PanelConfig {
  editableTitle: boolean;
  titlePropertyName: string;
  panelIdPropertyName: string;
  children?: PropertyPaneConfig[];
  contentChildren?: PropertyPaneConfig[];
  styleChildren?: PropertyPaneConfig[];
  searchConfig?: PropertyPaneConfig[]; // A combination of contentChildren and contentChildren which will be used to display search results
  updateHook: (
    props: any,
    propertyPath: string,
    propertyValue: any,
  ) => Array<PropertyUpdates> | undefined;
}

export interface PropertyPaneControlConfig {
  id?: string;
  label: string;
  propertyName: string;
  // Serves in the tooltip
  helpText?: string;
  //Dynamic text serves below the property pane inputs
  helperText?: ((props: any) => React.ReactNode) | React.ReactNode;
  isJSConvertible?: boolean;
  customJSControl?: string;
  controlType: ControlType;
  validationMessage?: string;
  dataTreePath?: string;
  children?: PropertyPaneConfig[];
  panelConfig?: PanelConfig;
  updateRelatedWidgetProperties?: (
    propertyName: string,
    propertyValue: any,
    props: any,
  ) => UpdateWidgetPropertyPayload[];
  updateHook?: (
    props: any,
    propertyName: string,
    propertyValue: any,
  ) => Array<PropertyUpdates> | undefined;
  hidden?: (props: any, propertyPath: string) => boolean;
  invisible?: boolean;
  isBindProperty: boolean;
  isTriggerProperty: boolean;
  validation?: ValidationConfig;
  useValidationMessage?: boolean;
  additionalAutoComplete?: (props: any) => AdditionalDynamicDataTree;
  evaluationSubstitutionType?: EvaluationSubstitutionType;
  dependencies?: string[];
  dynamicDependencies?: (widget: WidgetProps) => string[];
  evaluatedDependencies?: string[]; // dependencies to be picked from the __evaluated__ object
  expected?: CodeEditorExpected;
  getStylesheetValue?: (
    props: any,
    propertyPath: string,
    stylesheet?: Stylesheet,
  ) => Stylesheet[string];
  // TODO(abhinav): To fix this, rename the options property of the controls which use this
  // Alternatively, create a new structure
  options?: any;
  // The following should ideally be used internally
  postUpdateAction?: ReduxActionType;
  onBlur?: () => void;
  onFocus?: () => void;
  isPanelProperty?: boolean;
  // Numeric Input Control
  min?: number;
  // Switch mode ( JS -> Text )
  shouldSwitchToNormalMode?: (
    isDynamic: boolean,
    isToggleDisabled: boolean,
    triggerFlag?: boolean,
  ) => boolean;

  /**
   * `controlConfig` is a generic record that can be used to pass additional configuration
   * options to the property control. The specific structure and contents of this record
   * will depend on the control type and its individual requirements.
   */
  controlConfig?: Record<string, unknown>;
  defaultValue?: unknown;
}

export type PropertyPaneConfig =
  | PropertyPaneSectionConfig
  | PropertyPaneControlConfig;

export interface ActionValidationConfigMap {
  [configProperty: string]: ValidationConfig;
}

export interface UpdateWidgetPropertyPayload {
  widgetId: string;
  updates: BatchPropertyUpdatePayload;
  dynamicUpdates?: {
    dynamicBindingPathList?: DynamicPath[];
    dynamicTriggerPathList?: DynamicPath[];
    dynamicPropertyPathList?: DynamicPath[];
  };
  shouldReplay?: boolean;
}

export interface BatchPropertyUpdatePayload {
  modify?: Record<string, unknown>; //Key value pairs of paths and values to update
  remove?: string[]; //Array of paths to delete
  triggerPaths?: string[]; // Array of paths in the modify and remove list which are trigger paths
  postUpdateAction?: ReduxActionType; // Array of action types we need to dispatch after property updates.
}

export interface DynamicPath {
  key: string;
  value?: string;
}
